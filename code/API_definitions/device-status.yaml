openapi: 3.0.3
info:
  title: Device Status
  description: |
    This API provides the customer with the ability to query device roaming status and subscribe to event related to device roaming status.

    # Introduction

    API consumer is able to verify whether a certain user device is in roaming situation (or not). This capability is provided in 2 ways:
      - via direct request with the roaming situation in the response.
      - via a subscription  request - in this case the roaming situation is not in the response but event notification is sent back to the event subscriber when roaming situation change.

    The verification of the roaming situation depends on the network's ability. Additionally to the roaming status, when the device is in roaming situation, visited country information is send back in the response.

    Device status verification could be useful in scenario such as (not exhaustive):
      - For regulatory reasons, where a customer may need to be within a certain jurisdiction, or out with others, in order for transactions to be authorized
      - For security / fraud reasons, to establish that a customer is located where they claim to be
      - For service delivery reasons, to ensure that the customer has access to particular service, and will not incur roaming charges in accessing them


    # Relevant terms and definitions

    * **Device**: A device refers to any physical entity that can connect to a network and participate in network communication.
      At least one identifier for the device (user equipment) out of four options: IPv4 address, IPv6 address, Phone number, or Network Access Identifier assigned by the mobile network operator for the device.

    * **Roaming** : Roaming status. `true`, if device is in roaming situation - `false` else.

    * **Country** : Country code and name - visited country information, provided if the device is in roaming situation.


    # API Functionality    

    The API exposes following capabilities:

    ## Device roaming situation

    The endpoint `POST /roaming` allows to get roaming status and country information (if device in roaming situation) synchronously.

    ## Device status event subscription

    Theses endpoints allow to manage event subscription on roaming device status event. The CAMARA subscription model is detailed in the CAMARA API design guideline document.

    Following event type are managed for this API: 
      - EventRoamingStatus - Event triggered when the device switch from roaming ON to roaming OFF and conversely

      - EventRoamingOn - Event triggered when the device switch from roaming OFF to roaming ON

      - EventRoamingOff: Event triggered when the device switch from roaming ON to roaming OFF

      - EventRoamingChangeCountry : Event triggered when the device in roaming change country code

    ### Notification callback

    This endpoint describes the event notification received on subscription listener side when the event occurred. As for subscription, detailed description of the event notification is provided in the CAMARA API design guideline document.

    **WARNING**: This callback endpoint must be exposed on the listener side as `POST /{$request.body#/webhook/notificationUrl}`
      will be posted by the device status resource server to the webhook url provided by notification 
      listener.

    ## Further info and support

    (FAQs will be added in a later version of the documentation)

  termsOfService: http://swagger.io/terms/
  contact:
    email: project-email@sample.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.5.0-wip
externalDocs:
  description: Product documentation at CAMARA
  url: https://github.com/camaraproject/
security:
  #  - {}
  - oAuth2ClientCredentials: []
  #  - BasicAuth: []
  #  - apiKey: []
  - threeLegged:
      - device-status:roaming:read
      - device-status:roaming-event-subscriptions:create
servers:
  - url: '{apiRoot}/{basePath}'
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root
      basePath:
        default: /device-status/v0
        description: Base path for the device status API
tags:
  - name: Device roaming status
    description: Operation to get device roaming status and country information (if roaming) synchronously
  - name: Device status event subscription
    description: Operation to manage event subscription on device status event (roaming, connectivity)

paths:
  /roaming:
    post:
      tags:
        - Device roaming status
      summary: 'Get the current roaming status and the country information'
      description: Get the current roaming status and the country information
      operationId: getRoamingStatus
      security:
        - threeLegged: 
          - device-status:roaming:read
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestRoamingStatus'
        required: true
      responses:
        200:
          description: Contains information about current roaming status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoamingStatusResponse'
              examples:
                No-Country-Code:
                  value:
                    roaming: true
                    countryCode: 901
                    countryName: []
                Single-Country-Code:
                  value:
                    roaming: true
                    countryCode: 262
                    countryName: ["DE"]
                Multiple-Country-Codes:
                  value:
                    roaming: true
                    countryCode: 340
                    countryName: [ "BL","GF","GP","MF","MQ" ]
        400:
          $ref: "#/components/responses/Generic400"
        401:
          $ref: "#/components/responses/Generic401"
        403:
          $ref: "#/components/responses/Generic403"
        404:
          $ref: "#/components/responses/Generic404"
        500:
          $ref: "#/components/responses/Generic500"
        503:
          $ref: "#/components/responses/Generic503"
  /event-subscriptions:
    post:
      tags:
        - Device status event subscription
      summary: 'Create a device status event subscription for a device'
      description: Create a device status event subscription for a device
      operationId: createDevicStatusEventSubscription
      security:
        - threeLegged:
          - device-status:roaming-event-subscriptions:create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventSubscription'
        required: true
      callbacks:
        notifications:
          "{$request.body#/webhook/notificationUrl}":
            post:
              tags:
                - Session notifications callback
              summary: "Session notifications callback"
              description: |
                Important: this endpoint is to be implemented by the API consumer.
                The Device status server will call this endpoint whenever any device status related event occurs.
              operationId: postNotification
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/CloudEvent"
                    examples:
                      ROAMING_STATUS:
                        $ref: '#/components/examples/ROAMING_STATUS'
                      ROAMING_CHANGE_COUNTRY:
                        $ref: '#/components/examples/ROAMING_CHANGE_COUNTRY'
                      ROAMING_ON:
                        $ref: '#/components/examples/ROAMING_ON'
                      ROAMING_OFF:
                        $ref: '#/components/examples/ROAMING_OFF'
                      SUBSCRIPTION_ENDS:
                        $ref: '#/components/examples/SUBSCRIPTION_ENDS'
              responses:
                "204":
                  description: Successful notification
                "400":
                  $ref: "#/components/responses/Generic400"
                "401":
                  $ref: "#/components/responses/Generic401"
                "403":
                  $ref: "#/components/responses/Generic403"
                "500":
                  $ref: "#/components/responses/Generic500"
                "503":
                  $ref: "#/components/responses/Generic503"
              security:
                - { }
                - notificationsBearerAuth: [ ]


      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSubscriptionInfo'
        202 :
          description: Request accepted to be processed. It applies for async creation process.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSubscriptionAsync'
        400:
          $ref: '#/components/responses/Generic400'
        401:
          $ref: '#/components/responses/Generic401'
        403:
          $ref: '#/components/responses/Generic403'
        409:
          $ref: '#/components/responses/Generic409'
        500:
          $ref: '#/components/responses/Generic500'
        503:
          $ref: '#/components/responses/Generic503'
    get:
      tags:
        - Device status event subscription
      summary: 'Retrieve a list of device status event subscription'
      description: Retrieve a list of device status event subscription(s)
      operationId: retrieveEventSubscriptionList
      responses:
        200:
          description: List of event subscription details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventSubscriptionInfo'
        400:
          $ref: '#/components/responses/Generic400'
        401:
          $ref: '#/components/responses/Generic401'
        403:
          $ref: '#/components/responses/Generic403'
        500:
          $ref: '#/components/responses/Generic500'
        503:
          $ref: '#/components/responses/Generic503'
  /event-subscriptions/{eventSubscriptionId}:
    get:
      tags:
        - Device status event subscription
      summary: 'Retrieve a device status event subscription for a device'
      operationId: retrieveEventSubscription
      description: retrieve event subscription information for a given subscription.
      parameters:
        - name: eventSubscriptionId
          in: path
          description: Event subscription identifier that was obtained from the create subscription operation
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSubscriptionInfo'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              examples:
                Generic400:
                  summary: Schema validation failed
                  value:
                    code: INVALID_INPUT
                    status: 400
                    message: "Schema validation failed at  ..."
                subscriptionIdRequired:
                  summary: eventSubscription id is required
                  value:
                    code: INVALID_INPUT
                    status: 400
                    message: "Expected property is missing: eventSubscriptionId"
        401:
          $ref: "#/components/responses/Generic401"
        403:
          $ref: "#/components/responses/Generic403"
        404:
          $ref: "#/components/responses/Generic404"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
        503:
          $ref: "#/components/responses/Generic503"
    delete:
      tags:
        - Device status event subscription
      summary: 'Delete a device status event subscription for a device'
      operationId: deleteEventSubscription
      description: delete a  given event subscription.
      parameters:
        - name: eventSubscriptionId
          in: path
          description: Event subscription identifier that was obtained from the create event subscription operation
          required: true
          schema:
            type: string
      responses:
        204:
          description: event subscription deleted
        202 :
          description: Request accepted to be processed. It applies for async deletion process.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSubscriptionAsync'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              examples:
                Generic400:
                  summary: Schema validation failed
                  value:
                    code: INVALID_INPUT
                    status: 400
                    message: "Schema validation failed at  ..."
                subscriptionIdRequired:
                  summary: eventSubscription id is required
                  value:
                    code: INVALID_INPUT
                    status: 400
                    message: "Expected property is missing: eventSubscriptionId"
        401:
          $ref: "#/components/responses/Generic401"
        403:
          $ref: "#/components/responses/Generic403"
        404:
          $ref: "#/components/responses/Generic404"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
        503:
          $ref: "#/components/responses/Generic503"
components:
  securitySchemes:
    oAuth2ClientCredentials:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: '{tokenUrl}'
          scopes: {}
    #    BasicAuth:
    #      type: http
    #      scheme: basic
    #    apiKey:
    #      type: apiKey
    #      description: API key to authorize requests
    #      name: apikey
    #      in: query
    threeLegged:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: "{authorizationUrl}"
          tokenUrl: "{tokenUrl}"
          scopes:
            device-status:roaming:read: Read device roaming status
            device-status:roaming-event-subscriptions:create: create device status subscription for roaming information
  schemas:
    RoamingStatusResponse:
      type: object
      required:
        - roaming
      properties:
        roaming:
          $ref: '#/components/schemas/ActiveRoaming'
        countryCode:
          $ref: '#/components/schemas/CountryCode'
        countryName:
          $ref: '#/components/schemas/CountryName'

    ActiveRoaming:
      description: Roaming status. True, if it is roaming
      type: boolean

    Device:
      description: |
        End-user equipment able to connect to a mobile network. Examples of devices include smartphones or IoT sensors/actuators. 

        The developer can choose to provide the below specified device identifiers:

        * `ipv4Address`
        * `ipv6Address`
        * `phoneNumber`
        * `networkAccessIdentifier`  

        NOTE: the MNO might support only a subset of these options. The API invoker can provide multiple identifiers to be compatible across different MNOs. In this case the identifiers MUST belong to the same device
      type: object
      properties:
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        networkAccessIdentifier:
          $ref: "#/components/schemas/NetworkAccessIdentifier"
        ipv4Address:
          $ref: "#/components/schemas/DeviceIpv4Addr"
        ipv6Address:
          $ref: "#/components/schemas/Ipv6Address"
      minProperties: 1
    NetworkAccessIdentifier:
      type: string
      example: '123456789@domain.com'
      description: A public identifier addressing a subscription in a mobile network. In 3GPP terminology, it corresponds to the GPSI formatted with the External Identifier ({Local Identifier}@{Domain Identifier}). Unlike the telephone number, the network access identifier is not subjected to portability ruling in force, and is individually managed by each operator.

    PhoneNumber:
      type: string
      pattern: '^\+?[0-9]{5,15}$'
      example: '123456789'
      description: A public identifier addressing a telephone subscription. In mobile networks it corresponds to the MSISDN (Mobile Station International Subscriber Directory Number). In order to be globally unique it has to be formatted in international format, according to E.164 standard, optionally prefixed with '+'.

    DeviceIpv4Addr:
      type: object
      description: |
        The device should be identified by either the public (observed) IP address and port as seen by the application server, or the private (local) and any public (observed) IP addresses in use by the device (this information can be obtained by various means, for example from some DNS servers).
        
        If the allocated and observed IP addresses are the same (i.e. NAT is not in use) then  the same address should be specified for both publicAddress and privateAddress.
        
        If NAT64 is in use, the device should be identified by its publicAddress and publicPort, or separately by its allocated IPv6 address (field ipv6Address of the Device object)
        
        In all cases, publicAddress must be specified, along with at least one of either privateAddress or publicPort, dependent upon which is known. In general, mobile devices cannot be identified by their public IPv4 address alone.
      properties:
        publicAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        privateAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        publicPort:
          $ref: "#/components/schemas/Port"
      anyOf:
        - required: [publicAddress, privateAddress]
        - required: [publicAddress, publicPort]
      example:
        {
          "publicAddress": "84.125.93.10",
          "publicPort" : 59765
        }

    SingleIpv4Addr:
      description: A single IPv4 address with no subnet mask
      type: string
      pattern: '^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
      example: "84.125.93.10"

    Ipv6Address:
      description: |
        IPv6 address, following IETF 5952 format, may be specified in form <address/mask> as:
          - address - The /128 subnet is optional for single addresses:
            - 2001:db8:85a3:8d3:1319:8a2e:370:7344
            - 2001:db8:85a3:8d3:1319:8a2e:370:7344/128
          - address/mask - an IP v6 number with a mask:
            - 2001:db8:85a3:8d3::0/64
            - 2001:db8:85a3:8d3::/64
      type: string
      format: ipv6
      allOf:
        - pattern: '^((:|(0?|([1-9a-f][0-9a-f]{0,3}))):)((0?|([1-9a-f][0-9a-f]{0,3})):){0,6}(:|(0?|([1-9a-f][0-9a-f]{0,3})))(\/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))?$'
        - pattern: '^((([^:]+:){7}([^:]+))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?))(\/.+)?$'
      example: '2001:db8:85a3:8d3:1319:8a2e:370:7344'

    CountryCode:
      description: The Mobile country code (MCC) as an geographic region identifier for the country and the dependent areas.
      type: integer

    CountryName:
      description: The ISO 3166 ALPHA-2 country-codes of mapped to mobile country code(MCC). If there is mapping of one MCC to multiple countries, then we have list of countries. If there is no mapping of MCC to any country, then an empty array [] shall be returned..
      type: array
      items:
        type: string
    RequestRoamingStatus:
      type: object
      properties:
        device:
          $ref: '#/components/schemas/Device'
      required:
        - device

    Port:
      description: User equipment port. Device port may be required along with IP address to identify the target device
      type: integer
      minimum: 0
      maximum: 65535
      example: 5060

    ErrorInfo:
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          description: HTTP response status code
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description
        
    CreateEventSubscription:
      description: The request for creating a Device Status event subscription
      type: object
      required:
        - webhook
      properties:
        subscriptionDetail:
          $ref: '#/components/schemas/EventSubscriptionDetail'
        subscriptionExpireTime:
          type: string
          format: date-time
          example: 2023-01-17T13:18:23.682Z
          description: The subscription expiration time in date-time format.
        webhook:
          $ref: '#/components/schemas/Webhook'

    Webhook:
      description: Webhook information for event channel
      type: object
      required:
        - notificationUrl
      properties:
        notificationUrl:
          type: string
          example: "https://application-server.com"
          description: https callback address where the event notification must be POST-ed
        notificationAuthToken:
          type: string
          example: "c8974e592c2fa383d4a3960714"
          description: | 
            OAuth2 token to be used by the callback API endpoint. It MUST be indicated within HTTP Authorization header e.g. Authorization: Bearer $notificationAuthToken

    EventSubscriptionDetail:
      description: The detail of the requested event subscription
      type: object
      required:
        - subject
      properties:
        device:
          $ref: '#/components/schemas/Device'
        subject:
          $ref: '#/components/schemas/RoamingEventSubject'

    RoamingEventSubject:
      type: string
      description: |
        EventRoamingStatus - Event triggered when the device switch from roaming ON to roaming OFF and conversely

        EventRoamingOn - Event triggered when the device switch from roaming OFF to roaming ON

        EventRoamingOff: Event triggered when the device switch from roaming ON to roaming OFF

        EventRoamingChangeCountry: Event triggered when the device in roaming change country code
      enum:
        - EventRoamingStatus
        - EventRoamingOn
        - EventRoamingOff
        - EventRoamingChangeCountry

    RoamingNotificationEventSubject:
      type: string
      description: |
        EventRoamingStatus - Event triggered when the device switch from roaming ON to roaming OFF and conversely

        EventRoamingOn - Event triggered when the device switch from roaming OFF to roaming ON

        EventRoamingOff: Event triggered when the device switch from roaming ON to roaming OFF

        EventRoamingChangeCountry: Event triggered when the device in roaming change country code

        EventSubscriptionEnds: Event triggered when the subscription ends
      enum:
        - EventRoamingStatus
        - EventRoamingOn
        - EventRoamingOff
        - EventRoamingChangeCountry
        - EventSubscriptionEnds

    EventSubscriptionInfo:
      description: Represents a device status subscription.
      allOf:
        - $ref: '#/components/schemas/CreateEventSubscription'
        - type: object
          properties:
            eventSubscriptionId:
              $ref: '#/components/schemas/EventSubscriptionId'
            startsAt:
              type: string
              format: date-time
              description: date time when subscription started
            expiresAt:
              type: string
              format: date-time
              description: date time when subscription will expire or expired
          required:
            - eventSubscriptionId
            - type

    EventSubscriptionAsync:
      description: Response for a device status operation managed asynchronously (Creation or Deletion)
      type: object
      properties:
          eventSubscriptionId:
              $ref: '#/components/schemas/EventSubscriptionId'

    EventSubscriptionId:
      type: string
      description: The event subscription identifier.

    CloudEvent:
      description: The notification callback
      required:
        - id
        - source
        - specversion
        - type
        - subject
      properties:
        id:
          type: string
          description: identifier of this event, that must be unique in the source context.
        source:
          $ref: '#/components/schemas/Source'
        type:
          type: string
          description: 'type of event as defined in each CAMARA API'
          example: org.camara.api.device-status.RoamingStatusEvent
        specversion:
          type: string
          description: Version of the specification to which this event conforms (must be 1.0 if it conforms to cloudevents 1.0.2 version)
          example: 1.0
        datacontenttype:
          type: string
          description: 'media-type that describes the event payload encoding, must be "application/json" for CAMARA APIs'
          example: application/json
        data:
          type: object
          description: Event details payload described in each CAMARA API and referenced by its type
        subject:
          description: Describes the subject of the event in the context of the event producer (identified by source).
          $ref: '#/components/schemas/RoamingNotificationEventSubject'
        time:
          $ref: "#/components/schemas/DateTime"
      discriminator:
        propertyName: 'subject'
        mapping:
            EventRoamingStatus: '#/components/schemas/EventRoamingStatus'
            EventRoamingChangeCountry : '#/components/schemas/EventRoamingChangeCountry'
            EventRoamingOff: '#/components/schemas/EventRoamingOff'
            EventRoamingOn: '#/components/schemas/EventRoamingOn'
            EventSubscriptionEnds : '#/components/schemas/EventSubscriptionEnds'

    Source:
      type: string
      format: uri-reference
      minLength: 1
      description: "Identifies the context in which an event happened in the specific Provider Implementation."
      example:
        - https://github.com/cloudevents
        - mailto:cncf-wg-serverless@lists.cncf.io
        - urn:uuid:6e8bc430-9c3a-11d9-9669-0800200c9a66
        - cloudevents/spec/pull/123
        - /sensors/tn-1234567/alerts
        - 1-555-123-4567

    DateTime:
      type: string
      format: date-time
      description: Timestamp of when the occurrence happened. Must adhere to RFC 3339.
      example: '2018-04-05T17:31:00Z'

    EventRoamingStatus:
      description:  event structure for roaming status change
      allOf:
        - $ref: '#/components/schemas/CloudEvent'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/RoamingStatus'

    EventRoamingOn:
      description:  event structure for roaming on and roaming off change
      allOf:
        - $ref: '#/components/schemas/CloudEvent'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/RoamingChange'

    EventRoamingOff:
      description:  event structure for roaming on and roaming off change
      allOf:
        - $ref: '#/components/schemas/CloudEvent'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/RoamingChange'

    EventRoamingChangeCountry:
      description:  event structure for roaming change country
      allOf:
        - $ref: '#/components/schemas/CloudEvent'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/RoamingChangeCountry'

    EventSubscriptionEnds:
      description:  event structure for event subscription ends
      allOf:
        - $ref: '#/components/schemas/CloudEvent'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/SubscriptionEnds'

    RoamingStatus:
      description: Event detail structure for ROAMING_STATUS event
      type : object
      required:
        - device
        - roaming
      properties:
        device:
          $ref: '#/components/schemas/Device'
        roaming:
          type: boolean
          description:  Roaming status. True, if it is roaming.
        countryCode:
          $ref: '#/components/schemas/CountryCode'
        countryName:
          $ref: '#/components/schemas/CountryName'

    RoamingChange:
      description: Event detail structure for ROAMING_ON & ROAMING_OFF event
      type : object
      required:
        - device
      properties:
        device:
          $ref: '#/components/schemas/Device'

    RoamingChangeCountry:
      description: Event detail structure for ROAMING_CHANGE_COUNTRY event
      type : object
      required:
        - device
      properties:
        device:
          $ref: '#/components/schemas/Device'
        countryCode:
          $ref: '#/components/schemas/CountryCode'
        countryName:
          $ref: '#/components/schemas/CountryName'

    SubscriptionEnds:
      description: Event detail structure for SUBSCRIPTION_ENDS event
      type : object
      required:
        - device
        - terminationReason
      properties:
        device:
          $ref: '#/components/schemas/Device'
        terminationReason:
          type: string
          enum: ["SUBSCRIPTION_EXPIRED", "NETWORK_TERMINATED"]

  responses:
    Generic400:
      description: Problem with the client request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 400
            code: "INVALID_ARGUMENT"
            message: "Client specified an invalid argument, request body or query param"
    Generic401:
      description: Authentication problem with the client request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 401
            code: "UNAUTHENTICATED"
            message: "Request not authenticated due to missing, invalid, or expired credentials"
    Generic403:
      description: Client does not have sufficient permission
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 403
            code: "PERMISSION_DENIED"
            message: "Client does not have sufficient permissions to perform this action"
    Generic404:
      description: Resource Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            code: NOT_FOUND
            message: "The specified resource is not found"
    Generic409:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            code: CONFLICT
            message: "The specified resource is in a conflict"
    Generic500:
      description: Server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 500
            code: "INTERNAL"
            message: "Server error"
    Generic503:
      description: Service unavailable. Typically the server is down.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 503
            code: "UNAVAILABLE"
            message: "Service unavailable"
  examples:
    ROAMING_STATUS:
      value: 
        id: 123654
        source: supertelco.notificationSendServer12
        type: org.camara.api.device-status.RoamingStatusEvent
        specversion: 1.0
        datacontenttype: application/json
        data: 
          device:
              phoneNumber: 123456789
          roaming: true
          countryCode: 208
          ountryName: FR
        subject: EventRoamingStatus
        time: 2023-01-17T13:18:23.682Z

    ROAMING_OFF:
      value:
        id: 123655
        source: supertelco.notificationSendServer12
        type: org.camara.api.device-status.RoamingOffEvent
        specversion: 1.0
        datacontenttype: application/json
        data: 
          device:
              phoneNumber: 123456788
        subject: EventRoamingOff
        time: 2023-01-18T13:18:23.682Z

    ROAMING_ON:
      value:
        id: 123656
        source: supertelco.notificationSendServer12
        type: org.camara.api.device-status.RoamingOnEvent
        specversion: 1.0
        datacontenttype: application/json
        data: 
          device:
              phoneNumber: 123456787
        subject: EventRoamingOn
        time: 2023-01-19T13:18:23.682Z

    ROAMING_CHANGE_COUNTRY:
      value:
        id: 123657
        source: supertelco.notificationSendServer12
        type: org.camara.api.device-status.RoamingChangeCountryEvent
        specversion: 1.0
        datacontenttype: application/json
        data: 
          device:
              phoneNumber: 123456789
              countryCode: 214
        subject: EventRoamingChangeCountry 
        time: 2023-01-19T13:18:23.682Z

    SUBSCRIPTION_ENDS:
      value:
        id: 123658
        source: supertelco.notificationSendServer12
        type: org.camara.api.device-status.RoamingSubscriptionEndsEvent
        specversion: 1.0
        datacontenttype: application/json
        data: 
          device:
              phoneNumber: 123456789
              terminationReason: SUBSCRIPTION_EXPIRED
        subject: EventSubscriptionEnds
        time: 2023-01-19T13:18:23.682Z
